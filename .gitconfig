[alias]
	# View the SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph
	# View the last commit
	last = log -1 HEAD
	# View the current working tree status using the short format
	stat = status -s
	# Show the diff between the latest commit and the current state
	diff-latest = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# `git diff-n $number` shows the diff between the state `$number` revisions ago and the current state
	diff-n = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Highlight word changes instead of full lines
	diff-words = diff --word-diff
	# Colorful diff
	diff-colorful = !"d() { git diff --no-index --color-words \"$@\"; }; d"
	# Pull in remote changes for the current repository and all its submodules
	pull-all = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	cloner = clone --recursive
	# Commit all changes
	commit-all = !"git add -A && git commit -av"
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	rebase-n = "!r() { git rebase -i HEAD~$1; }; r"
	# Undo a `git push`
	undopush = push -f origin HEAD^:master
	# Unstage files for commit
	unadd = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git reset HEAD -- $files; }; f"
	# Accept the local changes to resolve conflicts
	accept-ours = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --ours -- $files; git add -u $files; }; f"
	# Accept the incoming changes to resolve conflicts
	accept-theirs = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --theirs -- $files; git add -u $files; }; f"
	# CD to the root of the project
	cd-top = !"cd $(git rev-parse --show-toplevel)"
	# Show changed files that have not been pushed
	outgoing = log origin/master..HEAD
	# Stop tracking a file
	forget = "!r() { git rm --cached \"$@\"; }; r"
	# Add 'upstream' remote
	add-upstream = "!r() { git remote add upstream \"$@\" }; r"
	# Merge upstream/master changes into current branch
	merge-up = "!r() { upstream=${@:-'upstream'}; git fetch origin -v; git fetch $upstream -v; git merge \"$upstream/master\"; }; r"
	# Apply Github pull request to current branch
	apply-pullrequest = "!r() { curl \"$@\" | git am }; r"

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,indent-with-tab,trailing-space
	# Let Git handle line endings automatically
	autocrlf = input
	# Use Sublime Text 2 as the default editor
	editor = subl -n -w

[advice]
	pushNonFastForward = false
	statusHints = false

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[diff]
	renames = copies
	mnemonicprefix = true

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[rerere]
	enabled = true

[merge]
	# Exclude summaries of merged commits in newly created merge commit messages
	log = false
	stat = true

[branch]
	autosetupmerge = true

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

[push]
	default = current

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
