#  Replacement for builtin 'cd', which keeps a separate bash-history for every
#  project directory.
#  Source: Aaron Harnly https://github.com/aaronharnly/dotfiles-public/blob/master/.bash-functions.sh#L263
function hcd() {
  builtin cd "$@"  # do actual cd

  # Short circuit if no projects dir is set
  if [ -z "$PROJECTS_DIR" ]; then
    return
  fi

  local this_dir="$PWD"
  local this_dirname=$(basename "$PWD")
  local parent_dir=$(dirname "$PWD")
  local default_histfile="$HOME/.bash_history"
  local active_venv=$(basename "$VIRTUAL_ENV")
  local project_dir project_name project_venv

  # If we're entering a project directory, load the project bash history and
  # check for a Python virtual environment
  if [[ "$parent_dir" == "$PROJECTS_DIR"* ]]; then
    if [ "$parent_dir" == "$PROJECTS_DIR" ]; then
      project_name="${this_dirname}"
    else
      project_name=${parent_dir#"$PROJECTS_DIR/"}
      project_name=${project_name%%/*}
    fi

    project_dir="${PROJECTS_DIR}/${project_name}"

    # Load project bash history
    if [ "$PROJECT" != "${project_name}" ]; then
      echo "Loading ${project_name}"

      history -a # append new entries to current history file
      local hist_dir="$HOME/.bash_history.d${project_dir}"
      if [ ! -d "$hist_dir" ]; then # create folder if needed
        mkdir -p "$hist_dir"
      fi
      export HISTFILE="${hist_dir}/bash_history" # set new history file
      history -c # clear memory
      history -r # read from current histfile

      # Set the active project name
      export PROJECT="$project_name"
    fi

    # Load the project virtual environment
    # 1. Walk up to the project root looking for a '.venv' file
    # 2. Check the list of virtualenvs for one matching the project name
    local walk_dir="$this_dir"
    while [[ -z "$project_venv" && "$walk_dir" == "$project_dir"* ]]; do
      # Check for a .venv file and then move up a directory
      if [ -e "${walk_dir}/.venv" ]; then
        project_venv=$(cat "${walk_dir}/.venv")
      fi
      walk_dir=$(dirname "$walk_dir")
    done

    # If no .venv file was found, try to match the project directory name to an
    # existing virtual environment name
    # TODO: Use '$VIRTUALENVWRAPPER_HOOK_DIR/get_env_details' instead
    if [[ -z "$project_venv" && -d "$WORKON_HOME/${project_name}" ]]; then
      # Found a virtualenv matching the project name
      project_venv="$project_name"
    fi

    # Load/unload virtualenv
    if [[ -z "$project_venv" && ! -z "$VIRTUAL_ENV" ]]; then
      # No matching virtualenv, deactivate the active virtual environment
      deactivate
    elif [ ! -z "$project_venv" ] && [[ -z "$active_venv" || "${active_venv,,}" != "${project_venv,,}" ]]; then
      echo "Activating virtualenv: $project_venv"
      # source "$HOME/virtualenvs/${this_dirname}/bin/activate"
      workon "$project_venv"
    fi
  elif [ ! -z "$PROJECT" ]; then
    echo "Leaving $PROJECT"

    # Load default bash history
    if [ "$HISTFILE" != "${DEFAULT_HISTFILE:-default_histfile}" ]; then
      history -a # append new entries to current history file
      export HISTFILE="${DEFAULT_HISTFILE:-default_histfile}"
      history -c # clear memory
      history -r # read from current histfile
    fi

    # Deactivate the active virtual environment
    if [ ! -z "$VIRTUAL_ENV" ]; then
      deactivate
    fi

    # Clear the active project name
    unset PROJECT
  fi
}

# Go to project directory, allowing tab-completion of subdirectories
function cdp() {
	hcd $PROJECTS_DIR/$1
}
# Bash completion to auto-complete subdirectories
_cdp() {
    local cur quoted i j k
    local wdir="~/Projects"

    _get_comp_words_by_ref cur
		_quote_readline_by_ref "$wdir/$cur" quoted

		_compopt_o_filenames

    local -r mark_dirs=$(_rl_enabled mark-directories && echo y)
    local -r mark_symdirs=$(_rl_enabled mark-symlinked-directories && echo y)

    k="${#COMPREPLY[@]}"
    for j in $( compgen -d $quoted ); do
        if [[ ( $mark_symdirs && -h $j || $mark_dirs && ! -h $j ) && ! -d ${j#$wdir/} ]]; then
            j="${j}/"
        fi
        COMPREPLY[k++]=${j#$wdir/}
    done

    if [[ ${#COMPREPLY[@]} -eq 1 ]]; then
        i=${COMPREPLY[0]}
        if [[ "$i" == "$cur" && $i != "*/" ]]; then
            COMPREPLY[0]="${i}/"
        fi
    fi

    return 0
}
complete -F _cdp -o nospace cdp

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$@"
}

# Simple calculator
function calc() {
  local result=""
  result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
  #                       └─ default (when `--mathlib` is used) is 20
  #
  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    printf "$result" |
    sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
        -e 's/^-\./-0./'      `# add "0" for cases like "-.5"` \
        -e 's/0*$//;s/\.$//'   # remove trailing zeros
  else
    printf "$result"
  fi
  printf "\n"
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
	echo # newline
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
	local text
	if [ -t 0 ]; then # argument
		text="$1"
	else # pipe
		text=$(cat)
	fi
	body=$(echo "$text" | sed -E 's|$|<br>|g')
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$text", body:"$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
	for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
		xattr -r -d "$attribute" "$@"
	done
}